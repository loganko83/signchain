import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/components/ui/use-toast";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Cloud,
  FolderOpen,
  FileText,
  RefreshCw,
  Check,
  X,
  AlertCircle,
  Shield,
  Clock,
  Upload,
  Download,
  Settings,
  LogIn,
  Plus,
  Trash2,
  ExternalLink,
  Info
} from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

interface CloudService {
  id: string;
  name: string;
  type: "google_drive" | "dropbox" | "onedrive";
  connected: boolean;
  email?: string;
  lastSync?: string;
  settings: {
    autoSync: boolean;
    syncInterval: "manual" | "realtime" | "hourly" | "daily";
    folderPath: string;
    encryption: boolean;
    twoFactorRequired: boolean;
  };
}

interface SyncedFile {
  id: string;
  name: string;
  service: string;
  localPath: string;
  cloudPath: string;
  lastSync: string;
  status: "synced" | "syncing" | "error" | "pending";
  size: string;
}

export default function CloudIntegration() {
  const { toast } = useToast();
  
  const [services, setServices] = useState<CloudService[]>([
    {
      id: "1",
      name: "Google Drive",
      type: "google_drive",
      connected: true,
      email: "user@gmail.com",
      lastSync: "2024-01-22 14:30",
      settings: {
        autoSync: true,
        syncInterval: "realtime",
        folderPath: "/SignChain/Contracts",
        encryption: true,
        twoFactorRequired: false
      }
    },
    {
      id: "2",
      name: "Dropbox",
      type: "dropbox",
      connected: false,
      settings: {
        autoSync: false,
        syncInterval: "manual",
        folderPath: "/SignChain",
        encryption: false,
        twoFactorRequired: false
      }
    },
    {
      id: "3",
      name: "OneDrive",
      type: "onedrive",
      connected: false,
      settings: {
        autoSync: false,
        syncInterval: "manual",
        folderPath: "/Documents/SignChain",
        encryption: false,
        twoFactorRequired: false
      }
    }
  ]);

  const [syncedFiles] = useState<SyncedFile[]>([
    {
      id: "1",
      name: "ÏÑúÎπÑÏä§ Ïù¥Ïö© Í≥ÑÏïΩÏÑú_v2.pdf",
      service: "Google Drive",
      localPath: "/contracts/2024/01/service-agreement-v2.pdf",
      cloudPath: "/SignChain/Contracts/2024/service-agreement-v2.pdf",
      lastSync: "2024-01-22 14:30",
      status: "synced",
      size: "2.4 MB"
    },
    {
      id: "2",
      name: "Í∑ºÎ°úÍ≥ÑÏïΩÏÑú_ÍπÄÏ≤†Ïàò.pdf",
      service: "Google Drive",
      localPath: "/contracts/2024/01/employment-kim.pdf",
      cloudPath: "/SignChain/Contracts/2024/employment-kim.pdf",
      lastSync: "2024-01-22 13:15",
      status: "syncing",
      size: "1.8 MB"
    },
    {
      id: "3",
      name: "NDA_ÌÖåÌÅ¨Í∏∞ÏóÖ.pdf",
      service: "Google Drive",
      localPath: "/contracts/2024/01/nda-tech.pdf",
      cloudPath: "/SignChain/Contracts/2024/nda-tech.pdf",
      lastSync: "2024-01-22 12:00",
      status: "error",
      size: "956 KB"
    }
  ]);

  const [selectedService, setSelectedService] = useState<CloudService | null>(null);

  const connectService = async (serviceId: string) => {
    const service = services.find(s => s.id === serviceId);
    if (!service) return;

    toast({
      title: "Ïó∞Í≤∞ Ï§ë",
      description: `${service.name} Ïó∞Í≤∞ÏùÑ ÏãúÏûëÌï©ÎãàÎã§...`
    });

    // Simulate OAuth flow
    setTimeout(() => {
      setServices(prev => prev.map(s => 
        s.id === serviceId 
          ? { ...s, connected: true, email: `user@${s.type.replace('_', '')}.com` }
          : s
      ));
      
      toast({
        title: "Ïó∞Í≤∞ ÏôÑÎ£å",
        description: `${service.name}Ïù¥(Í∞Ä) ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ïó∞Í≤∞ÎêòÏóàÏäµÎãàÎã§.`
      });
    }, 2000);
  };

  const disconnectService = (serviceId: string) => {
    const service = services.find(s => s.id === serviceId);
    if (!service) return;

    setServices(prev => prev.map(s => 
      s.id === serviceId 
        ? { ...s, connected: false, email: undefined }
        : s
    ));
    
    toast({
      title: "Ïó∞Í≤∞ Ìï¥Ï†úÎê®",
      description: `${service.name} Ïó∞Í≤∞Ïù¥ Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.`
    });
  };

  const syncNow = async (serviceId: string) => {
    const service = services.find(s => s.id === serviceId);
    if (!service) return;

    toast({
      title: "ÎèôÍ∏∞Ìôî ÏãúÏûë",
      description: `${service.name} ÎèôÍ∏∞ÌôîÎ•º ÏãúÏûëÌï©ÎãàÎã§...`
    });

    // Simulate sync
    setTimeout(() => {
      setServices(prev => prev.map(s => 
        s.id === serviceId 
          ? { ...s, lastSync: new Date().toLocaleString() }
          : s
      ));
      
      toast({
        title: "ÎèôÍ∏∞Ìôî ÏôÑÎ£å",
        description: `${service.name} ÎèôÍ∏∞ÌôîÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.`
      });
    }, 3000);
  };

  const updateServiceSetting = (serviceId: string, key: keyof CloudService['settings'], value: any) => {
    setServices(prev => prev.map(s => 
      s.id === serviceId 
        ? { ...s, settings: { ...s.settings, [key]: value } }
        : s
    ));
    
    toast({
      title: "ÏÑ§Ï†ï Ï†ÄÏû•Îê®",
      description: "ÌÅ¥ÎùºÏö∞Îìú Ïä§ÌÜ†Î¶¨ÏßÄ ÏÑ§Ï†ïÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§."
    });
  };

  const getServiceIcon = (type: string) => {
    switch (type) {
      case "google_drive":
        return "üî∑";
      case "dropbox":
        return "üì¶";
      case "onedrive":
        return "‚òÅÔ∏è";
      default:
        return "üìÅ";
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "synced":
        return <Check className="h-4 w-4 text-green-600" />;
      case "syncing":
        return <RefreshCw className="h-4 w-4 text-blue-600 animate-spin" />;
      case "error":
        return <X className="h-4 w-4 text-red-600" />;
      case "pending":
        return <Clock className="h-4 w-4 text-yellow-600" />;
      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      <Tabs defaultValue="services" className="space-y-4">
        <TabsList>
          <TabsTrigger value="services">Ïó∞Í≤∞Îêú Ïä§ÌÜ†Î¶¨ÏßÄ</TabsTrigger>
          <TabsTrigger value="files">ÎèôÍ∏∞Ìôî ÌååÏùº</TabsTrigger>
          <TabsTrigger value="settings">ÏÑ§Ï†ï</TabsTrigger>
        </TabsList>

        <TabsContent value="services" className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {services.map((service) => (
              <Card key={service.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <span className="text-2xl">{getServiceIcon(service.type)}</span>
                      <CardTitle className="text-lg">{service.name}</CardTitle>
                    </div>
                    {service.connected && (
                      <Badge className="bg-green-500">Ïó∞Í≤∞Îê®</Badge>
                    )}
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {service.connected ? (
                    <>
                      <div className="space-y-2 text-sm">
                        <div className="flex items-center justify-between">
                          <span className="text-muted-foreground">Í≥ÑÏ†ï:</span>
                          <span className="font-medium">{service.email}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-muted-foreground">ÎßàÏßÄÎßâ ÎèôÍ∏∞Ìôî:</span>
                          <span className="font-medium">{service.lastSync || "ÏóÜÏùå"}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-muted-foreground">ÏûêÎèô ÎèôÍ∏∞Ìôî:</span>
                          <Badge variant={service.settings.autoSync ? "default" : "secondary"}>
                            {service.settings.autoSync ? "ÏºúÏßê" : "Í∫ºÏßê"}
                          </Badge>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          className="flex-1"
                          onClick={() => syncNow(service.id)}
                        >
                          <RefreshCw className="h-4 w-4 mr-2" />
                          ÎèôÍ∏∞Ìôî
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          className="flex-1"
                          onClick={() => setSelectedService(service)}
                        >
                          <Settings className="h-4 w-4 mr-2" />
                          ÏÑ§Ï†ï
                        </Button>
                      </div>
                      <Button
                        size="sm"
                        variant="destructive"
                        className="w-full"
                        onClick={() => disconnectService(service.id)}
                      >
                        Ïó∞Í≤∞ Ìï¥Ï†ú
                      </Button>
                    </>
                  ) : (
                    <Button
                      className="w-full"
                      onClick={() => connectService(service.id)}
                    >
                      <LogIn className="h-4 w-4 mr-2" />
                      {service.name} Ïó∞Í≤∞
                    </Button>
                  )}
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="files" className="space-y-4">
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>ÎèôÍ∏∞ÌôîÎêú ÌååÏùº</CardTitle>
                <Button size="sm" variant="outline">
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Ï†ÑÏ≤¥ ÎèôÍ∏∞Ìôî
                </Button>
              </div>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>ÌååÏùºÎ™Ö</TableHead>
                    <TableHead>ÏÑúÎπÑÏä§</TableHead>
                    <TableHead>ÌÅ¨Í∏∞</TableHead>
                    <TableHead>ÎßàÏßÄÎßâ ÎèôÍ∏∞Ìôî</TableHead>
                    <TableHead>ÏÉÅÌÉú</TableHead>
                    <TableHead className="text-right">ÏûëÏóÖ</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {syncedFiles.map((file) => (
                    <TableRow key={file.id}>
                      <TableCell className="font-medium">
                        <div className="flex items-center gap-2">
                          <FileText className="h-4 w-4 text-muted-foreground" />
                          {file.name}
                        </div>
                      </TableCell>
                      <TableCell>{file.service}</TableCell>
                      <TableCell className="text-sm text-muted-foreground">
                        {file.size}
                      </TableCell>
                      <TableCell className="text-sm text-muted-foreground">
                        {file.lastSync}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          {getStatusIcon(file.status)}
                          <span className="text-sm">
                            {file.status === "synced" && "ÎèôÍ∏∞ÌôîÎê®"}
                            {file.status === "syncing" && "ÎèôÍ∏∞Ìôî Ï§ë"}
                            {file.status === "error" && "Ïò§Î•ò"}
                            {file.status === "pending" && "ÎåÄÍ∏∞ Ï§ë"}
                          </span>
                        </div>
                      </TableCell>
                      <TableCell className="text-right">
                        <div className="flex justify-end gap-2">
                          <Button size="sm" variant="ghost">
                            <Download className="h-4 w-4" />
                          </Button>
                          <Button size="sm" variant="ghost">
                            <ExternalLink className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="settings" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Ï†ÑÏó≠ ÏÑ§Ï†ï</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <h3 className="font-medium">ÎèôÍ∏∞Ìôî Í∑úÏπô</h3>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <Label>ÏÑúÎ™Ö ÏôÑÎ£åÎêú Î¨∏ÏÑúÎßå ÎèôÍ∏∞Ìôî</Label>
                    <Switch defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label>Î∏îÎ°ùÏ≤¥Ïù∏ Í≤ÄÏ¶ùÎêú Î¨∏ÏÑúÎßå ÎèôÍ∏∞Ìôî</Label>
                    <Switch defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <Label>ÌÖúÌîåÎ¶ø ÎèôÍ∏∞Ìôî</Label>
                    <Switch />
                  </div>
                </div>
              </div>

              <div className="space-y-4">
                <h3 className="font-medium">ÌååÏùº Íµ¨Ï°∞</h3>
                <div className="space-y-2">
                  <Label>Ìè¥Îçî Íµ¨Ï°∞ ÌòïÏãù</Label>
                  <Select defaultValue="year-month">
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="year-month">/ÎÖÑÎèÑ/Ïõî/ÌååÏùºÎ™Ö</SelectItem>
                      <SelectItem value="category">/Ïπ¥ÌÖåÍ≥†Î¶¨/ÌååÏùºÎ™Ö</SelectItem>
                      <SelectItem value="client">/Í≥†Í∞ùÎ™Ö/ÌååÏùºÎ™Ö</SelectItem>
                      <SelectItem value="flat">Îã®Ïùº Ìè¥Îçî</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-4">
                <h3 className="font-medium">Î≥¥Ïïà</h3>
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <div className="flex items-start gap-2">
                    <AlertCircle className="h-4 w-4 text-yellow-600 mt-0.5" />
                    <div className="text-sm">
                      <p className="font-medium text-yellow-900">Ï£ºÏùòÏÇ¨Ìï≠</p>
                      <p className="text-yellow-700">
                        ÌÅ¥ÎùºÏö∞Îìú Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•Îêú Î¨∏ÏÑúÎäî Ìï¥Îãπ ÏÑúÎπÑÏä§Ïùò Î≥¥Ïïà Ï†ïÏ±ÖÏùÑ Îî∞Î¶ÖÎãàÎã§.
                        ÎØºÍ∞êÌïú Î¨∏ÏÑúÎäî ÏïîÌò∏Ìôî ÏòµÏÖòÏùÑ ÌôúÏÑ±ÌôîÌïòÎäî Í≤ÉÏùÑ Í∂åÏû•Ìï©ÎãàÎã§.
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="pt-4 border-t">
                <div className="flex items-center gap-4">
                  <Button variant="outline" className="flex-1">
                    <Download className="h-4 w-4 mr-2" />
                    Ï†ÑÏ≤¥ Î∞±ÏóÖ
                  </Button>
                  <Button variant="outline" className="flex-1">
                    <Upload className="h-4 w-4 mr-2" />
                    Î≥µÏõê
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}